{
	"info": {
		"_postman_id": "7c857185-6bb7-4322-81c7-a9b85c048347",
		"name": "HW_2_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2.Статус код 200",
							"pm.test(\"Status code is 200\" , function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Text is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\" , function () {",
							"    pm.response.to.have.status(200);",
							"} );",
							"// 3. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"console.log(jsonData);",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Check name\", function () {",
							"",
							"    pm.expect(jsonData.name).to.eql(\"Svetlana\");",
							"});",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Check age\", function () {",
							"    ",
							"    pm.expect(jsonData.age).to.eql(\"24\");",
							"});",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Check salary\", function () {",
							"    ",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"});",
							"// 7. Спарсить request.",
							"var req = request.data;",
							"    console.log(\"Request\" , req);",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check params name\" , function () {",
							"       ",
							"        pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check params age\", function () {",
							"    ",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check params salary\", function () {",
							"//    var requestSalary = parseInt(req.salary);",
							"",
							"    pm.expect(jsonData.salary).to.eql(+req.salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"",
							"    console.log(\"Family = \" , jsonData.family);",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Salary check\", function () {",
							"",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary*4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Svetlana",
							"type": "default"
						},
						{
							"key": "age",
							"value": "24",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\" , function () {",
							"   pm.response.to.have.status(200); ",
							"});",
							"// 3. Спарсить response body в json.",
							" var jsonData = pm.response.json();",
							"",
							"     console.log(\"Body = \" , jsonData);",
							" ",
							"// 4. Спарсить request.",
							"var requestData = pm.request.url.query.toObject();",
							"    console.log(\"Request\" , requestData);",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Check params name\" , function () {",
							"       ",
							"        pm.expect(jsonData.name).to.eql(requestData.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check params age\" , function () {",
							"",
							"        pm.expect(jsonData.age).to.eql(requestData.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check params salary\" , function () {",
							"// var requestSalary = parseInt(request.data.salary);",
							"",
							"        pm.expect(jsonData.salary).to.eql(+requestData.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"",
							"    console.log(\"Family = \" , jsonData.family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has name\", function () {",
							"    ",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog's age\" , function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Name's dog is Luky\" , function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Age's dog = 4\" , function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Svetlana&age=24&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\" , function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"    var jsonData = pm.response.json();",
							"",
							"    console.log(\"Body = \" , jsonData);",
							"// 4. Спарсить request.",
							"var requestData = pm.request.url.query.toObject();",
							"",
							"    console.log(\"Request\" , requestData);",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check params name\" , function () {",
							"       ",
							"        pm.expect(jsonData.name).to.eql(requestData.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check params age\" , function () {",
							"// var requestAge = parseInt(requestData.age);",
							"",
							"        pm.expect(jsonData.age).to.eql(+requestData.age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"     console.log(\"Salary from request = \", requestData.salary);",
							"// 8. Вывести в консоль параметр salary из response.",
							"",
							"    console.log(\"Salary = \" , jsonData.salary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"    console.log(\"Salary[0] = \" , jsonData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"    console.log(\"Salary[1] = \" , jsonData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"    console.log(\"Salary[2]\" , jsonData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check params salary[0]\" , function () {",
							"    pm.expect(jsonData.salary[0]).to.eql(+requestData.salary); ",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check params salary[1]\" , function () {",
							"    pm.expect(+jsonData.salary[1]).to.eql(requestData.salary*2)",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check params salary[2]\" , function () {",
							"    pm.expect(+jsonData.salary[2]).to.eql(requestData.salary*3)",
							"    // pm.expect(Number(jsonData.salary[2])).to.eql(Number(requestData.salary*3));",
							"});",
							"// 15. Создать в окружении переменную name   +",
							"// 16. Создать в окружении переменную age    +",
							"// 17. Создать в окружении переменную salary +",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", requestData.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", requestData.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", requestData.salary);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"let i = jsonData.salary;",
							"for(let i of jsonData.salary) {",
							"    console.log(\"print\",[i])",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Svetlana&age=24&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Svetlana"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request  +",
							"// 2. Вставить параметр age из окружения в age         +",
							"// 3. Вставить параметр name из окружения в name       +",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"var jsonData = pm.response.json();",
							"console.log(\"Response = \" , jsonData);",
							"// 7. Спарсить request.",
							"var req = request.data;",
							"console.log(\"Request\", req);",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Check param start_qa_salary\", function () {",
							"  ",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"qa_salary_after_6_months\", function () {",
							"   ",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"qa_salary_after_12_months\" , function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"qa_salary_after_1.5_year\" , function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"qa_salary_after_3.5_years\" , function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"person\" , function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check params start_qa_salary\" , function () {",
							"    // var requestSalary = parseInt(req.salary);",
							"        pm.expect(jsonData.start_qa_salary).to.eql(+req.salary);",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months\" , function () {",
							"    // var requestSalary = parseInt(req.salary*2);",
							"        pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months\" , function () {",
							"    // var requestSalary = parseInt(req.salary*2.7);",
							"        pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year\" , function () {",
							"    // var requestSalary = parseInt(req.salary*3.3);",
							"    ",
							"        pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req.salary*3.3);",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_years\" , function () {",
							"    // var requestSalary = parseInt(req.salary*3.8);",
							"    ",
							"        pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req.salary*3.8);",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Check person,u_name[1] = salary from request\" , function () {",
							"    // var requestSalary = parseInt(req.salary);",
							"        pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check u_age = age from request\" , function () {",
							"    // var requestAge = parseInt(req.age);",
							"   ",
							"        pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years\" , function () {",
							"    // var requestSalary = parseInt(req.salary*4.2);",
							" ",
							"        pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);",
							"});",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person",
							"var response = pm.response.json();",
							"var person = response.person.u_name;",
							"for(var i in person) {",
							"    console.log(\"Person [\" + i + \"]\" , person[i])",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}